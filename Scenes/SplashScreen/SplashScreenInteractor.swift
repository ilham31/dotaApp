//
//  SplashScreenInteractor.swift
//  dota
//
//  Created by Muhammad Ilham Ramadhan on 23/07/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import Realm
import RealmSwift

protocol SplashScreenBusinessLogic {
    func getHeroData()
}

class SplashScreenInteractor: SplashScreenBusinessLogic {
    var presenter: SplashScreenPresentationLogic?
    let realm = try! Realm()
    
    func getHeroData() {
        if realm.isEmpty {
            AF.request("https://api.opendota.com/api/herostats").responseJSON { [weak self] response in
                if(response.response?.statusCode == 200) {
                    guard let data = response.data else { return }
                    do {
                        let decoder = JSONDecoder()
                        let heroList = try decoder.decode([Hero].self, from: data)
                        let realm = try! Realm()
                        try! realm.write {
                            realm.add(heroList)
                        }
                        self?.saveRolesValue(heroes: realm.objects(Hero.self))
                        self?.presenter?.presentSuccessLoadingData()
                    } catch {
                        self?.presenter?.presentErrorLoadData()
                    }
                } else {
                    self?.presenter?.presentErrorLoadData()
                }
            }
        } else {
            Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true, block: { [weak self] timer in
                self?.presenter?.presentSuccessLoadingData()
            })
        }
    }
    
    private func saveRolesValue(heroes: Results<Hero>) {
        var allRoles: [String] = [""]
        heroes.forEach {
            allRoles.append(contentsOf: $0.roles)
        }
        var uniqueRoles = Array(Set(allRoles)).filter({!$0.isEmpty})
        uniqueRoles.append(DotaAppsConstants.allRoles)
        let heroRole: HeroRolesModel = HeroRolesModel()
        uniqueRoles.forEach {
            heroRole.roles.append($0)
        }
        try! realm.write {
            realm.add(heroRole)
        }
    }
}
