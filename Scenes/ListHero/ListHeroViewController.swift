//
//  ListHeroViewController.swift
//  dota
//
//  Created by Muhammad Ilham Ramadhan on 23/07/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListHeroDisplayLogic: class {
    func displayRoles(roles: [String])
    func displayHeroesBasedOnRoles(heroes: [Hero])
}

class ListHeroViewController: UIViewController {
    @IBOutlet weak var rolesTableView: UITableView!
    @IBOutlet weak var rolesTableViewWidthConstant: NSLayoutConstraint!
    @IBOutlet weak var heroCollectionView: UICollectionView!
    
    var interactor: ListHeroBusinessLogic?
    var router: ListHeroRoutingLogic?
    
    //tableView value
    private var roles: [String] = []
    private var selectedRole: String = ""
    
    //collectionView value
    private var hero: [Hero] = []
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = ListHeroInteractor()
        let presenter = ListHeroPresenter()
        let router = ListHeroRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        rolesTableViewWidthConstant.constant = UIScreen.main.bounds.width / 3
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.getAllRoles()
        setupView()
    }
}

//MARK: - Setup View
extension ListHeroViewController {
    private func setupView() {
        setupTableView()
        setupCollectionView()
    }
    
    private func setupTableView() {
        rolesTableView.rowHeight = UITableView.automaticDimension
        rolesTableView.estimatedRowHeight = 200
        rolesTableView.delegate = self
        rolesTableView.dataSource = self
        rolesTableView.register(UINib(nibName: DotaAppsConstants.TableViewCell.roles, bundle: nil), forCellReuseIdentifier: DotaAppsConstants.TableViewCell.roles)
    }
    
    private func setupCollectionView() {
        heroCollectionView.register(UINib(nibName: DotaAppsConstants.CollectionViewCell.heroes, bundle: nil), forCellWithReuseIdentifier: DotaAppsConstants.CollectionViewCell.heroes)
        heroCollectionView.delegate = self
        heroCollectionView.dataSource = self
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        heroCollectionView.collectionViewLayout = layout
        heroCollectionView.contentInset = UIEdgeInsets.zero
    }
}

//MARK: - UITableView Data Source
extension ListHeroViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        roles.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = rolesTableView.dequeueReusableCell(withIdentifier: DotaAppsConstants.TableViewCell.roles) as? RolesTableViewCell
        cell?.setupCell(role: roles[indexPath.row])
        return cell ?? UITableViewCell()
    }
}

//MARK: - UITableView Delegate
extension ListHeroViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectedRole = roles[indexPath.row]
        interactor?.getHeroBasedOnRoles(key: selectedRole)
    }
}

//MARK: - UICollectionView Data Source
extension ListHeroViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        hero.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DotaAppsConstants.CollectionViewCell.heroes, for: indexPath) as? HeroCollectionViewCell
        let heroViewModel = HeroCollectionViewCell.HeroViewModel(name: hero[indexPath.row].localizedName, image: hero[indexPath.row].img)
        cell?.setupCell(hero: heroViewModel)
        return cell ?? UICollectionViewCell()
    }
}

//MARK: - UICollectionView Delegate
extension ListHeroViewController: UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let remainScreen = UIScreen.main.bounds.width - (UIScreen.main.bounds.width / 3)
        return CGSize(width: remainScreen / 4, height: 120 )
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToHeroDetail(viewController: self, hero: hero[indexPath.row], selectedRoles: selectedRole)
    }
}

//MARK: - List Hero Display Logic
extension ListHeroViewController: ListHeroDisplayLogic {
    func displayRoles(roles: [String]) {
        self.roles = roles
        selectedRole = roles[0]
        rolesTableView.reloadData()
        interactor?.getHeroBasedOnRoles(key: selectedRole)
    }
    
    func displayHeroesBasedOnRoles(heroes: [Hero]) {
        self.hero = heroes
        heroCollectionView.reloadData()
    }
}
