//
//  HeroDetailViewController.swift
//  dota
//
//  Created by Muhammad Ilham Ramadhan on 23/07/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HeroDetailDisplayLogic: class {
    func displaySimilarHero(hero: [Hero])
}

class HeroDetailViewController: UIViewController {
    @IBOutlet weak var heroImageView: UIImageView!
    @IBOutlet weak var heroTypesImageView: UIImageView!
    @IBOutlet weak var heroNameLabel: UILabel!
    @IBOutlet weak var heroRoleLabel: UILabel!
    @IBOutlet weak var similarHeroCollectionView: UICollectionView!
    @IBOutlet weak var attackLabel: UILabel!
    @IBOutlet weak var healthLabel: UILabel!
    @IBOutlet weak var defenseLabel: UILabel!
    @IBOutlet weak var manaLabel: UILabel!
    @IBOutlet weak var speedLabel: UILabel!
    @IBOutlet weak var rolesLabel: UILabel!
    
    var interactor: HeroDetailBusinessLogic?
    var router: (NSObjectProtocol & HeroDetailRoutingLogic)?
    var selectedHero: Hero?
    var selectedRoles: String = ""
    
    private var similarHero: [Hero] = []
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = HeroDetailInteractor()
        let presenter = HeroDetailPresenter()
        let router = HeroDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    static func instantiate() -> HeroDetailViewController {
        let vc = UIStoryboard(name: DotaAppsConstants.Storyboard.heroDetail, bundle: nil).instantiateInitialViewController() as! HeroDetailViewController
        return vc
    }
    
    override func viewWillAppear(_ animated: Bool) {
        navigationController?.setNavigationBarHidden(false, animated: animated)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

//MARK: - Setup View
extension HeroDetailViewController {
    private func setupView() {
        setupNavigationBar()
        setupHeroIdentity()
        setupHeroAttribute()
        setupSimilarHeroCollectionView()
        interactor?.getSimilarHero(primaryAttribute: selectedHero?.primaryAttr ?? "")
    }
    
    private func setupNavigationBar() {
        let backButton = UIBarButtonItem()
        backButton.title = selectedRoles.isEmpty ? "Back" : selectedRoles
        self.navigationController?.navigationBar.topItem?.backBarButtonItem = backButton
    }
    
    private func setupHeroIdentity() {
        //setup hero image
        let fileArray = selectedHero?.img.components(separatedBy: "/")
        let imagePath = fileArray?.last?.replacingOccurrences(of: ".png?", with: "") ?? ""
        if let image = UIImage(named: imagePath) {
            heroImageView.image = image
        }
        else {
            heroImageView.image = UIImage(named: "placeholder")
        }
        
        heroTypesImageView.image = UIImage(named: selectedHero?.attackType.lowercased() == "melee" ? "melees_hero" : "range_hero")
        heroNameLabel.text = selectedHero?.localizedName
        var heroesRoles = ""
        selectedHero?.roles.forEach {
            heroesRoles += "-\($0)\n"
        }
        heroRoleLabel.text = heroesRoles
    }
    
    private func setupHeroAttribute() {
        attackLabel.text = "\(selectedHero?.baseAttackMax ?? 0)"
        healthLabel.text = "\(selectedHero?.baseHealth ?? 0)"
        defenseLabel.text = "\(selectedHero?.baseArmor ?? 0)"
        manaLabel.text = "\(selectedHero?.baseMana ?? 0)"
        speedLabel.text = "\(selectedHero?.moveSpeed ?? 0)"
        rolesLabel.text = selectedHero?.primaryAttr
    }
    
    private func setupSimilarHeroCollectionView() {
        similarHeroCollectionView.register(UINib(nibName: DotaAppsConstants.CollectionViewCell.similarHeroes, bundle: nil), forCellWithReuseIdentifier: DotaAppsConstants.CollectionViewCell.similarHeroes)
        similarHeroCollectionView.dataSource = self
        let flowLayout = UICollectionViewFlowLayout()
        flowLayout.itemSize = CGSize(width: 150, height: 120)
        flowLayout.sectionInset = UIEdgeInsets(top: 0, left: 5, bottom: 0, right: 5)
        flowLayout.scrollDirection = .horizontal
        flowLayout.minimumInteritemSpacing = 0.0
        similarHeroCollectionView.collectionViewLayout = flowLayout
    }
}

//MARK: - UICollectionView Datasource
extension HeroDetailViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        similarHero.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DotaAppsConstants.CollectionViewCell.similarHeroes, for: indexPath) as? SimilarHeroCollectionViewCell
        cell?.setupCell(heroImage: similarHero[indexPath.row].img)
        return cell ?? UICollectionViewCell()
    }
}

//MARK: - Hero Detail Display Logic
extension HeroDetailViewController: HeroDetailDisplayLogic {
    func displaySimilarHero(hero: [Hero]) {
        similarHero = hero
        similarHeroCollectionView.reloadData()
    }
}
